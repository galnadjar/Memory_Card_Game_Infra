# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with its version. On push / workflow_dispatch  events, this workflow will run
name: 'Terraform'

on:
  push:
    paths:
      - '**/*.tf*'
  workflow_dispatch:

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1
        
      
      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.5.0
  
      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init
  
      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check
  
      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan -input=false
  
        # On push to "master", build or change infrastructure according to Terraform configuration files
      - name: Terraform Apply
        if: github.ref == 'refs/heads/"master"' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
        run: terraform apply -auto-approve -input=false
  
        # On push/dispatch updates the the s3 bucket with the terraform.tfstate file
      - name: Delete Old Terraform State File from S3
        run: |
          aws s3 rm s3://memory-card-game-terraform/terraform.tfstate || true  # Ignore error if the file does not exist
      
      - name: Upload New Terraform State File to S3
        run: |
          aws s3 cp terraform.tfstate s3://memory-card-game-terraform/terraform.tfstate

